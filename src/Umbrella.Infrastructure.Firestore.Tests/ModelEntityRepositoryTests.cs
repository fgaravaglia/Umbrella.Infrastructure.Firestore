using Microsoft.Extensions.Logging;
using Moq;
using Umbrella.Infrastructure.Firestore.Abstractions;
using Umbrella.Infrastructure.Firestore.Tests.Entities;
using Umbrella.Infrastructure.Firestore.Extensions;
using Umbrella.Infrastructure.Firestore.Tests.Entities.KeyValuePairExample;
using Umbrella.Infrastructure.Firestore.Tests.Mappers;

namespace Umbrella.Infrastructure.Firestore.Tests
{
    public class ModelEntityRepositoryTests : BaseFirestoreTests<TestEntityDocument>
    {
        public override string CollectionName { get { return "TestEntity"; } }

        ILogger _Logger;
        IFirestoreDocMapper<TestEntity, TestEntityDocument> _Mapper;
        IFirestoreDataRepository<TestEntityDocument> _DocumentRepository;
        TestEntityRepository _ModelRepository;

        public override void Setup()
        {
            base.Setup();

            this._CredentialManager.SetCredentialsForGCP();

            var logger = new Mock<ILogger>();
            this._Logger = logger.Object;

            var mapper = new Mock<IFirestoreDocMapper<TestEntity, TestEntityDocument>>();
            mapper.Setup(x => x.FromFirestoreDoc(It.IsAny<TestEntityDocument>())).Returns<TestEntityDocument>(x =>
           {
               var entity = new TestEntity();
               entity.ID = Guid.Parse(x.Id);
               entity.Counter = x.Counter;
               entity.CreatedOn = x.CreatedOn;
               entity.LastUpdatedOn = x.LastUpdatedOn;
               entity.Name = x.Name;
               return entity;
           });
            mapper.Setup(x => x.ToFirestoreDocument(It.IsAny<TestEntity>())).Returns<TestEntity>(x =>
            {
                var entity = new TestEntityDocument();
                entity.SetDocumentId(x.ID.ToString());
                entity.Counter = x.Counter;
                entity.CreatedOn = x.CreatedOn.ToFirestoreTimeStamp();
                entity.LastUpdatedOn = x.LastUpdatedOn;
                entity.Name = x.Name;
                return entity;
            });
            this._Mapper = mapper.Object;

            InstanceDocumentRepository();
            InstanceModelRepository();
        }

        private void InstanceDocumentRepository(bool autogeneratedId = false)
        {
            this._DocumentRepository = new BaseRepository<TestEntityDocument>(this._CredentialManager.ProjectID, 
                                                                            this.CollectionName, 
                                                                            autogeneratedId);
        }
        private void InstanceModelRepository()
        {
            this._ModelRepository = new TestEntityRepository(this._Logger,
                                                            this._Mapper, 
                                                            this._DocumentRepository);
        }

        #region Tests on Constructor

        [Test]
        public void Constructor_ThrowEx_IfProjectIdIsNull()
        {
            //******* GIVEN
            string projectId = "";
            string collectionName = "TestEntity";
            bool autoGenerateId = true;
            Func<ModelEntityRepository<TestEntity, TestEntityDocument>> factory = () =>
            {
                return new TestEntityRepository(_Logger, 
                                                projectId, 
                                                autoGenerateId, 
                                                collectionName,
                                                this._Mapper);
            };

            //******* WHEN
            ArgumentNullException ex = Assert.Throws<ArgumentNullException>(() => factory.Invoke());
            Assert.That(ex.ParamName, Is.EqualTo("projectId"));
            Assert.Pass();
        }


        [Test]
        public void Constructor_ThrowEx_IfCollectionNameIsNull()
        {
            //******* GIVEN
            string projectId = "projectId";
            string collectionName = "";
            bool autoGenerateId = true;
            Func<ModelEntityRepository<TestEntity, TestEntityDocument>> factory = () =>
            {
                return new TestEntityRepository(
                                                _Logger,
                                                projectId,
                                                autoGenerateId,
                                                collectionName,
                                                this._Mapper);
            };

            //******* WHEN
            ArgumentNullException ex = Assert.Throws<ArgumentNullException>(() => factory.Invoke());
            Assert.That(ex.ParamName, Is.EqualTo("collectionName"));
            Assert.Pass();
        }

        [Test]
        public void Constructor_ThrowEx_IfLoggerIsNull()
        {
            //******* GIVEN
            string projectId = "projectId";
            string collectionName = "TestEntity";
            bool autoGenerateId = true;
            Func<ModelEntityRepository<TestEntity, TestEntityDocument>> factory = () =>
            {
                return new TestEntityRepository(null,
                                                projectId,
                                                autoGenerateId,
                                                collectionName,
                                                this._Mapper);
            };

            //******* WHEN
            ArgumentNullException ex = Assert.Throws<ArgumentNullException>(() => factory.Invoke());
            Assert.That(ex.ParamName, Is.EqualTo("logger"));
            Assert.Pass();
        }

        [Test]
        public void Constructor_ThrowEx_IfMapperIsNull()
        {
            //******* GIVEN
            string projectId = "projectId";
            string collectionName = "TestEntity";
            bool autoGenerateId = true;
            Func<ModelEntityRepository<TestEntity, TestEntityDocument>> factory = () =>
            {
                return new TestEntityRepository(_Logger,
                                                projectId,
                                                autoGenerateId,
                                                collectionName,
                                                null);
            };

            //******* WHEN
            ArgumentNullException ex = Assert.Throws<ArgumentNullException>(() => factory.Invoke());
            Assert.That(ex.ParamName, Is.EqualTo("mapper"));
            Assert.Pass();
        }

        [Test]
        public void Constructor_ThrowEx_IfGoogleAppCredentialVariableIsNull()
        {
            //******* GIVEN
            string projectId = "projectId";
            string collectionName = "TestEntity";
            bool autoGenerateId = true;
            Func<ModelEntityRepository<TestEntity, TestEntityDocument>> factory = () =>
            {
                return new TestEntityRepository(
                                                _Logger,
                                                projectId,
                                                autoGenerateId,
                                                collectionName,
                                                this._Mapper);
            };
            Environment.SetEnvironmentVariable("GOOGLE_APPLICATION_CREDENTIALS", "");

            //******* WHEN
            InvalidOperationException ex = Assert.Throws<InvalidOperationException>(() => factory.Invoke());
            Assert.That(ex.Message, Is.EqualTo("MIssing Environment Variable: GOOGLE_APPLICATION_CREDENTIALS"));
            Assert.Pass();
        }

        #endregion

        #region Tests on Save

        [Test]
        public void Save_ThrowsEx_IfDtoIsNull()
        {
            //******* GIVEN
            TestEntity dto = null;

            //******* WHEN
            TestDelegate testcode = () => this._ModelRepository.Save(dto);

            //******* ASSERT
            ArgumentNullException ex = Assert.Throws<ArgumentNullException>(testcode);
            Assert.That(ex.ParamName, Is.EqualTo("dto"));
            Assert.Pass();
        }

        [Test]
        public void Save_Invokes_MapperToFirestoreDocument()
        {
            //******* GIVEN
            bool methodInvoked = false;
            TestEntity dto = new TestEntity();

            var mapper = new Mock<IFirestoreDocMapper<TestEntity, TestEntityDocument>>();
            mapper.Setup(x => x.ToFirestoreDocument(It.IsAny<TestEntity>())).Returns<TestEntity>(x => 
            {
                methodInvoked = true;
                var entity = new TestEntityDocument();
                entity.SetDocumentId(x.ID.ToString());
                return entity;
            });
            this._Mapper = mapper.Object;

            var firestoreRepo = new Mock<IFirestoreDataRepository<TestEntityDocument>>();
            this._DocumentRepository = firestoreRepo.Object;

            InstanceModelRepository();

            //******* WHEN
            this._ModelRepository.Save(dto);

            //******* ASSERT
            Assert.True(methodInvoked);
            Assert.Pass();
        }

        [Test]
        public void Save_Returns_SameEntityId()
        {
            //******* GIVEN
            TestEntity dto = new TestEntity()
            {
                ID = Guid.NewGuid(),
                Name ="yyyy",
                Counter = 1000
            };

            //******* WHEN
            string newId = this._ModelRepository.Save(dto);
            this._persistedEntities.Add(this._Mapper.ToFirestoreDocument(dto));

            //******* ASSERT
            Assert.False(String.IsNullOrEmpty(newId));
            Assert.That(newId, Is.EqualTo(dto.ID.ToString()));
            Assert.Pass();
        }

        [Test]
        public void Save_Returns_SameEntity()
        {
            //******* GIVEN
            TestEntity dto = new TestEntity()
            {
                ID = Guid.NewGuid(),
                Name = "yyyy",
                Counter = 1000
            };

            //******* WHEN
            string newId = this._ModelRepository.Save(dto);
            this._persistedEntities.Add(this._Mapper.ToFirestoreDocument(dto));

            //******* ASSERT
            Assert.False(String.IsNullOrEmpty(newId));
            var readEntity = this._ModelRepository.GetById(newId);
            Assert.False(readEntity == null);
            Assert.That(readEntity.ID, Is.EqualTo(dto.ID));
            Assert.That(readEntity.Name, Is.EqualTo("yyyy"));
            Assert.That(readEntity.Counter, Is.EqualTo(1000));
            Assert.Pass();
        }

        [Test]
        public void SaveEntityWIthKeyValuePairList_PersistExpectedDocument()
        {
            //******* GIVEN
            TestEntityWIthKeyValuePairList dto = new TestEntityWIthKeyValuePairList()
            {
                ID = Guid.NewGuid(),
                Name = "yyyy",
                Counter = 1000
            };
            dto.AddPair("A", "123");
            dto.AddPair("B", "-1,5");
            dto.AddPair("C", "1000");

            var mapper = new TestEntityWIthKeyValuePairListMapper();
            var firestoreRepo = new BaseRepository<TestEntityWIthKeyValuePairListDocument>(this._CredentialManager.ProjectID,
                                                                                            this.CollectionName,
                                                                                            false);
            var repository = new KeyValuePairTestEntityRepository(this._Logger,
                                                                mapper,
                                                                firestoreRepo);

            //******* WHEN
            string newId = repository.Save(dto);
            
            //******* ASSERT
            Assert.False(String.IsNullOrEmpty(newId));
            var readEntity = repository.GetById(newId);
            Assert.False(readEntity == null);
            Assert.That(readEntity.ID, Is.EqualTo(dto.ID));
            Assert.That(readEntity.Name, Is.EqualTo("yyyy"));
            Assert.That(readEntity.Counter, Is.EqualTo(1000));
            Assert.Pass();
        }
        #endregion

        #region Tests on Get

        [Test]
        public void GetAsync_Invokes_MapperFromFirestoreDocument()
        {
            //******* GIVEN
            bool methodInvoked = false;
            Guid entityId = Guid.NewGuid();

            var mapper = new Mock<IFirestoreDocMapper<TestEntity, TestEntityDocument>>();
            mapper.Setup(x => x.FromFirestoreDoc(It.IsAny<TestEntityDocument>())).Returns<TestEntityDocument>(x =>
            {
                methodInvoked = true;
                var entity = new TestEntity();
                entity.ID = Guid.Parse(x.Id);
                return entity;
            });
            this._Mapper = mapper.Object;

            var firestoreRepo = new Mock<IFirestoreDataRepository<TestEntityDocument>>();
            firestoreRepo.Setup(x => x.GetAsync(It.IsAny<IBaseFirestoreData>())).ReturnsAsync(() => 
            {
                var doc = new TestEntityDocument();
                doc.SetDocumentId(entityId.ToString());
                return doc;
            });
            this._DocumentRepository = firestoreRepo.Object;

            InstanceModelRepository();

            //******* WHEN
            this._ModelRepository.GetById(entityId.ToString());

            //******* ASSERT
            Assert.True(methodInvoked);
            Assert.Pass();
        }

        #endregion

        #region Tests on Delete

        // [Test]
        // public void Delete_Remove_TheDocument()
        // {
        //     //******* GIVEN
        //     TestEntity dto = new TestEntity()
        //     {
        //         ID = Guid.NewGuid(),
        //         Name = "yyyy",
        //         Counter = 1000
        //     };
        //     string newId = this._ModelRepository.Save(dto);
        //     Assert.False(String.IsNullOrEmpty(newId), "Precondition: Entity must exist");
        //     var existingCounter = this._ModelRepository.GetAll().Count();

        //     //******* WHEN
        //     this._ModelRepository.Delete(newId);

        //     //******* ASSERT
        //     var afterCounter = this._ModelRepository.GetAll().Count();
        //     Assert.That(afterCounter, Is.EqualTo(existingCounter - 1));
        //     Assert.Pass();
        // }

        [Test]
        public void Delete_ThrowsEx_IfKeyIsNull()
        {
            //******* GIVEN
            string key = "";

            //******* WHEN
            TestDelegate testcode = () => this._ModelRepository.Delete(key);

            //******* ASSERT
            ArgumentNullException ex = Assert.Throws<ArgumentNullException>(testcode);
            Assert.That(ex.ParamName, Is.EqualTo("keyValue"));
            Assert.Pass();
        }

        [Test]
        public void Delete_ThrowsEx_IfKeyDoesNotExist()
        {
            //******* GIVEN
            string key = "NotExisting";

            //******* WHEN
            TestDelegate testcode = () => this._ModelRepository.Delete(key);

            //******* ASSERT
            Assert.Throws<NullReferenceException>(testcode);
            Assert.Pass();
        }

        #endregion

    }
}